{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","images","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","nflLogo","clickedTeamIds","score","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","Team","key","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"64CAYeA,G,MAPF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,4BACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAG,UAAKJ,EAAMK,QAAUC,GAAIN,EAAMM,GACtDC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oBCFpDQ,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,Y,eCQ1CC,EAPD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,SAAd,cAAiC,kBAAC,IAAD,MAAjC,IAAmDD,EAAMY,OACzD,wBAAIX,UAAU,UAAUD,EAAMa,U,OCmEnBC,G,iNAlEbC,MAAQ,CACNC,UACAC,eAAgB,GAChBC,MAAO,EACPC,KAAM,EACNN,OAAQ,I,EAIVL,iBAAmB,SAAAF,GACjB,IAAIW,EAAiB,EAAKF,MAAME,eAEhC,GAAGA,EAAeG,SAASd,GACzB,EAAKe,SAAS,CAAEJ,eAAgB,GAAIC,MAAO,EAAGL,OAAS,kDADzD,CAME,GAFAI,EAAeK,KAAKhB,GAES,IAA1BW,EAAeM,OAGhB,OAFA,EAAKF,SAAS,CAACH,MAAO,EAAGL,OAAQ,kCAAmCI,eAAgB,UACpFO,QAAQC,IAAI,WAId,EAAKJ,SAAS,CAAEL,UAASC,iBAAgBC,MAAOD,EAAeM,OAAQV,OAAQ,MAE/E,IAAK,IAAIa,EAAIV,EAAQO,OAAS,EAAGG,EAAI,EAAGA,IAAK,CAC3C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADG,EAEhB,CAACV,EAAQW,GAAIX,EAAQU,IAA/CV,EAAQU,GAFkC,KAE9BV,EAAQW,GAFsB,Q,wEAQvC,IAAD,OACP,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,aAAb,2CAIF,kBAAC,EAAD,CAAOW,MAAOmB,KAAKhB,MAAMG,MAClBC,KAAM,EACNN,OAAQkB,KAAKhB,MAAMF,SAE1B,kBAAC,EAAD,KACGkB,KAAKhB,MAAMC,QAAQgB,IAAI,SAAAC,GAAI,OAC1B,kBAAC,EAAD,CACEzB,iBAAkB,EAAKA,iBACvBF,GAAI2B,EAAK3B,GACT4B,IAAKD,EAAK3B,GACVH,KAAM8B,EAAK9B,KACXE,OAAQ4B,EAAK5B,YAInB,gCACE,kDAAuB,uBAAG8B,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAzE,SAAvB,W,GA7DQC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.96eff86e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\nconst Card = props => (\r\n  <div className=\"card img-container hover\">\r\n      <img alt={props.name} src={`${props.images}`} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n//stateless component\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Score.css\";\r\nimport {GiPlainArrow} from \"react-icons/gi\";\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\">Your Score <GiPlainArrow /> {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport nflLogo from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.nflLogo to the cards json array\n  state = {\n    nflLogo,\n    clickedTeamIds: [],\n    score: 0,\n    goal: 8,\n    status: \"\"\n  };\n\n  //shuffle the pup cards in the browser when clicked\n  shuffleScoreCard = id => {\n    let clickedTeamIds = this.state.clickedTeamIds;\n\n    if(clickedTeamIds.includes(id)){\n      this.setState({ clickedTeamIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n      return;\n    }else{\n      clickedTeamIds.push(id)\n\n      if(clickedTeamIds.length === 8){\n        this.setState({score: 8, status: \"Touchdown! Click to play again!\", clickedTeamIds: []});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ nflLogo, clickedTeamIds, score: clickedTeamIds.length, status: \" \" });\n\n      for (let i = nflLogo.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [nflLogo[i], nflLogo[j]] = [nflLogo[j], nflLogo[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Clicky Game</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice!\n          </p>\n        </header>\n        <Score total={this.state.score}\n               goal={8}\n               status={this.state.status}\n               />\n        <Wrapper>\n          {this.state.nflLogo.map(Team => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={Team.id}\n              key={Team.id}\n              name={Team.name}\n              images={Team.images}\n            />\n          ))}\n        </Wrapper>\n        <footer>\n          <p>Woodley Johnson 2019<a href=\"https://github.com/dawood32913/clicky-game\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>.</p>\n        </footer>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}